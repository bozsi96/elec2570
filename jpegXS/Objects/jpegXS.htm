<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\jpegXS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\jpegXS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Sep 27 22:16:03 2021
<BR><P>
<H3>Maximum Stack Usage =        564 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; tco_enc_image &rArr; tco_enc_transforms &rArr; tco_image_apply_partial_dwt_hor &rArr; dwt53_wrap &rArr; dwt53
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[6]">Interrupt0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">Interrupt0_Handler</a><BR>
 <LI><a href="#[7]">Interrupt1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">Interrupt1_Handler</a><BR>
 <LI><a href="#[8]">Interrupt2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">Interrupt2_Handler</a><BR>
 <LI><a href="#[9]">Interrupt3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">Interrupt3_Handler</a><BR>
 <LI><a href="#[a]">Interrupt4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Interrupt4_Handler</a><BR>
 <LI><a href="#[b]">Interrupt5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Interrupt5_Handler</a><BR>
 <LI><a href="#[c]">Interrupt6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">Interrupt6_Handler</a><BR>
 <LI><a href="#[d]">Interrupt7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Interrupt7_Handler</a><BR>
 <LI><a href="#[e]">Interrupt8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">Interrupt8_Handler</a><BR>
 <LI><a href="#[f]">Interrupt9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Interrupt9_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">HardFault_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[6]">Interrupt0_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[7]">Interrupt1_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[8]">Interrupt2_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[9]">Interrupt3_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[a]">Interrupt4_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[b]">Interrupt5_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[c]">Interrupt6_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[d]">Interrupt7_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[e]">Interrupt8_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[f]">Interrupt9_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[10]">SystemInit</a> from system_armcm0.o(.text.SystemInit) referenced from startup_armcm0.o(.text)
 <LI><a href="#[11]">__main</a> from __main.o(!!!main) referenced from startup_armcm0.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[11]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[15]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[19]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[89]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[16]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit3.o(.ARM.Collect$$libinit$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[90]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[91]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[92]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[93]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[99]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[13]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[18]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; tco_enc_image &rArr; tco_enc_transforms &rArr; tco_image_apply_partial_dwt_hor &rArr; dwt53_wrap &rArr; dwt53
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>Interrupt0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>Interrupt1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>Interrupt2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Interrupt3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Interrupt4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Interrupt5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Interrupt6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Interrupt7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Interrupt8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Interrupt9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control_open
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbt_open
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_open_column
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elec2570_image_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_open
</UL>

<P><STRONG><a name="[24]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[25]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_image_apply_partial_dwt_ver
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_image_apply_partial_dwt_hor
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt53_wrap
</UL>

<P><STRONG><a name="[ab]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[27]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[ac]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_lvls_map
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_reset
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_idivmod</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_is_first_of_slice
</UL>

<P><STRONG><a name="[af]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b2]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2c]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[17]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[2e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[b6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[b7]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[b8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[30]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2f]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[20]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[33]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[34]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[10]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>band_to_level</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lvls_map.o(.text.band_to_level))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_lvls_map
</UL>

<P><STRONG><a name="[61]"></a>bands_count_of</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, precinct.o(.text.bands_count_of))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_gclis
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
</UL>

<P><STRONG><a name="[35]"></a>bitpacker_add_padding</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bitpacking.o(.text.bitpacker_add_padding))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bitpacker_add_padding &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
</UL>

<P><STRONG><a name="[37]"></a>bitpacker_align</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bitpacking.o(.text.bitpacker_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bitpacker_align &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
</UL>

<P><STRONG><a name="[38]"></a>bitpacker_flush</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bitpacking.o(.text.bitpacker_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bitpacker_flush &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipx_htobe
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[60]"></a>bitpacker_get_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bitpacking.o(.text.bitpacker_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[3a]"></a>bitpacker_open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bitpacking.o(.text.bitpacker_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bitpacker_open &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_init
</UL>

<P><STRONG><a name="[3b]"></a>bitpacker_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bitpacking.o(.text.bitpacker_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bitpacker_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_set_buffer
</UL>

<P><STRONG><a name="[3d]"></a>bitpacker_set_buffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bitpacking.o(.text.bitpacker_set_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitpacker_set_buffer &rArr; bitpacker_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[36]"></a>bitpacker_write</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bitpacking.o(.text.bitpacker_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipx_htobe
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_weights_table
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_picture_header
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_component_table
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_capabilities_marker
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_tail
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_slice_header
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_head
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sign
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_data
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write_unary_unsigned
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_align
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_add_padding
</UL>

<P><STRONG><a name="[3e]"></a>bitpacker_write_unary_unsigned</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bitpacking.o(.text.bitpacker_write_unary_unsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bitpacker_write_unary_unsigned &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_gclis
</UL>

<P><STRONG><a name="[48]"></a>budget_get_data_budget</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, budget.o(.text.budget_get_data_budget))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = budget_get_data_budget
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[4c]"></a>budget_get_sign_budget</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, budget.o(.text.budget_get_sign_budget))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = budget_get_sign_budget
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[81]"></a>compute_gcli_buf</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gcli.o(.text.compute_gcli_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = compute_gcli_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_gclis
</UL>

<P><STRONG><a name="[72]"></a>compute_gtli_tables</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, sb_weighting.o(.text.compute_gtli_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = compute_gtli_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control
</UL>

<P><STRONG><a name="[40]"></a>dwt53</STRONG> (Thumb, 374 bytes, Stack size 60 bytes, dwt53.o(.text.dwt53))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dwt53
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt53_wrap
</UL>

<P><STRONG><a name="[55]"></a>dwt53_get_lvl_sizes</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dwt53.o(.text.dwt53_get_lvl_sizes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dwt53_get_lvl_sizes
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_lvls_map
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_image_apply_partial_dwt_ver
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_image_apply_partial_dwt_hor
</UL>

<P><STRONG><a name="[3f]"></a>dwt53_wrap</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, dwt53.o(.text.dwt53_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dwt53_wrap &rArr; dwt53
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt53
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_image_apply_partial_dwt_ver
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_image_apply_partial_dwt_hor
</UL>

<P><STRONG><a name="[41]"></a>elec2570_image_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text.elec2570_image_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = elec2570_image_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>fill_data_budget_table</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, budget.o(.text.fill_data_budget_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fill_data_budget_table &rArr; budget_get_sign_budget
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_width_of
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_line_of
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_width_of
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_of
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_count_of
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;budget_get_sign_budget
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;budget_get_data_budget
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_lvl_of
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbt_get_sign_bgt_of
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbt_get_data_bgt_of
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control
</UL>

<P><STRONG><a name="[4d]"></a>fill_gcli_budget_table</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, budget.o(.text.fill_gcli_budget_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fill_gcli_budget_table
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_width_of
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_of
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_count_of
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbt_get_gcli_bgt_of
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control
</UL>

<P><STRONG><a name="[4f]"></a>fill_lvls_map</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, lvls_map.o(.text.fill_lvls_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fill_lvls_map &rArr; dwt53_get_lvl_sizes
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;last_band_of_map
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_band_of_map
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;band_to_level
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_vlvl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_hlvl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt53_get_lvl_sizes
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_init
</UL>

<P><STRONG><a name="[56]"></a>fill_precinct</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, precinct.o(.text.fill_precinct))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fill_precinct &rArr; lvlmap_get_ptr_by_column
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_sig_mag_buf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvlmap_get_ptr_by_column
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_width_of
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_line_of
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[50]"></a>first_band_of_map</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lvls_map.o(.text.first_band_of_map))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_lvls_map
</UL>

<P><STRONG><a name="[7e]"></a>image_offset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, image_transforms.o(.text.image_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_transforms
</UL>

<P><STRONG><a name="[7d]"></a>image_shift</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, image_transforms.o(.text.image_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = image_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_transforms
</UL>

<P><STRONG><a name="[68]"></a>init_budget_info</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, precinct_budget.o(.text.init_budget_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_budget_info
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
</UL>

<P><STRONG><a name="[39]"></a>ipx_htobe</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bitpacking.o(.text.ipx_htobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipx_htobe
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_flush
</UL>

<P><STRONG><a name="[51]"></a>last_band_of_map</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lvls_map.o(.text.last_band_of_map))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_lvls_map
</UL>

<P><STRONG><a name="[43]"></a>line_count_of</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, precinct.o(.text.line_count_of))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gcli_budget_table
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[57]"></a>lvlmap_get_ptr_by_column</STRONG> (Thumb, 96 bytes, Stack size 28 bytes, lvls_map.o(.text.lvlmap_get_ptr_by_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lvlmap_get_ptr_by_column
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_precinct
</UL>

<P><STRONG><a name="[1b]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = main &rArr; tco_enc_image &rArr; tco_enc_transforms &rArr; tco_image_apply_partial_dwt_hor &rArr; dwt53_wrap &rArr; dwt53
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elec2570_image_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5b]"></a>map_get_NL</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lvls_map.o(.text.map_get_NL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map_get_NL
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_get_N_filtertypes
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_weights_table
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_conf_validate
</UL>

<P><STRONG><a name="[5c]"></a>map_get_N_filtertypes</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lvls_map.o(.text.map_get_N_filtertypes))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_weights_table
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_conf_validate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_get_NL
</UL>

<P><STRONG><a name="[5d]"></a>pack_data</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, packing.o(.text.pack_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_data &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
</UL>

<P><STRONG><a name="[5e]"></a>pack_gclis</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, packing.o(.text.pack_gclis))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_gclis &rArr; bitpacker_write_unary_unsigned &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_width_of
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_of
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write_unary_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
</UL>

<P><STRONG><a name="[5f]"></a>pack_precinct</STRONG> (Thumb, 522 bytes, Stack size 64 bytes, packing.o(.text.pack_precinct))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pack_precinct &rArr; pack_sign &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_sign
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_gclis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bands_count_of
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_subpkt_of
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_lvl_of
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_width_of
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_line_of
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_of
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_count_of
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_get_len
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_align
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_add_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[64]"></a>pack_sign</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, packing.o(.text.pack_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pack_sign &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
</UL>

<P><STRONG><a name="[65]"></a>pbt_open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, precinct_budget.o(.text.pbt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbt_open &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control_open
</UL>

<P><STRONG><a name="[45]"></a>precinct_gcli_of</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, precinct.o(.text.precinct_gcli_of))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_gclis
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_gclis
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gcli_budget_table
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[46]"></a>precinct_gcli_width_of</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, precinct.o(.text.precinct_gcli_width_of))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_gclis
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_gclis
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gcli_budget_table
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[66]"></a>precinct_get_budget</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, precinct_budget.o(.text.precinct_get_budget))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = precinct_get_budget &rArr; init_budget_info
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_budget_info
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_subpkt_of
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_nb_subpkts_of
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbt_get_sign_bgt_of
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbt_get_gcli_bgt_of
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbt_get_data_bgt_of
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bands_count_of
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_count_of
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control
</UL>

<P><STRONG><a name="[6d]"></a>precinct_is_first_of_slice</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, precinct.o(.text.precinct_is_first_of_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = precinct_is_first_of_slice &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[73]"></a>precinct_is_last_of_image</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, precinct.o(.text.precinct_is_last_of_image))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control
</UL>

<P><STRONG><a name="[49]"></a>precinct_line_of</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, precinct.o(.text.precinct_line_of))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_gclis
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_precinct
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[6f]"></a>precinct_open_column</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, precinct.o(.text.precinct_open_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = precinct_open_column &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;width_of_level
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_init
</UL>

<P><STRONG><a name="[4a]"></a>precinct_width_of</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, precinct.o(.text.precinct_width_of))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_gclis
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_precinct
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[71]"></a>rate_control</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, rate_control.o(.text.rate_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rate_control &rArr; fill_data_budget_table &rArr; budget_get_sign_budget
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_gtli_tables
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_is_last_of_image
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bands_count_of
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gcli_budget_table
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[78]"></a>rate_control_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rate_control.o(.text.rate_control_init))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[74]"></a>rate_control_open</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rate_control.o(.text.rate_control_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rate_control_open &rArr; pbt_open &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_init
</UL>

<P><STRONG><a name="[75]"></a>tco_conf_validate</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, tco_conf.o(.text.tco_conf_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tco_conf_validate &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_get_N_filtertypes
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_get_NL
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_init
</UL>

<P><STRONG><a name="[5a]"></a>tco_enc_image</STRONG> (Thumb, 240 bytes, Stack size 248 bytes, tco_enc.o(.text.tco_enc_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tco_enc_image &rArr; tco_enc_transforms &rArr; tco_image_apply_partial_dwt_hor &rArr; dwt53_wrap &rArr; dwt53
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_tail
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_slice_header
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_head
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_transforms
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_gclis
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_is_first_of_slice
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_precinct
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_set_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_get_len
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>tco_enc_init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tco_enc.o(.text.tco_enc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tco_enc_init &rArr; tco_conf_validate &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_conf_validate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control_open
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_open_column
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_lvls_map
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>tco_enc_transforms</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tco_enc.o(.text.tco_enc_transforms))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = tco_enc_transforms &rArr; tco_image_apply_partial_dwt_hor &rArr; dwt53_wrap &rArr; dwt53
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_image_apply_partial_dwt_ver
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_image_apply_partial_dwt_hor
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_shift
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[80]"></a>tco_image_apply_partial_dwt_hor</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, image_transforms.o(.text.tco_image_apply_partial_dwt_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tco_image_apply_partial_dwt_hor &rArr; dwt53_wrap &rArr; dwt53
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt53_wrap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt53_get_lvl_sizes
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_transforms
</UL>

<P><STRONG><a name="[7f]"></a>tco_image_apply_partial_dwt_ver</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, image_transforms.o(.text.tco_image_apply_partial_dwt_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tco_image_apply_partial_dwt_ver &rArr; dwt53_wrap &rArr; dwt53
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt53_wrap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt53_get_lvl_sizes
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_transforms
</UL>

<P><STRONG><a name="[58]"></a>to_sig_mag_buf</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sig_mag.o(.text.to_sig_mag_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = to_sig_mag_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_precinct
</UL>

<P><STRONG><a name="[7a]"></a>update_gclis</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, precinct.o(.text.update_gclis))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = update_gclis &rArr; compute_gcli_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bands_count_of
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_gcli_buf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_width_of
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_line_of
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_width_of
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_gcli_of
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[70]"></a>width_of_level</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lvls_map.o(.text.width_of_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = width_of_level
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_open_column
</UL>

<P><STRONG><a name="[82]"></a>xs_write_capabilities_marker</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, xs_markers.o(.text.xs_write_capabilities_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xs_write_capabilities_marker &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_head
</UL>

<P><STRONG><a name="[83]"></a>xs_write_component_table</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, xs_markers.o(.text.xs_write_component_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xs_write_component_table &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_head
</UL>

<P><STRONG><a name="[77]"></a>xs_write_head</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, xs_markers.o(.text.xs_write_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xs_write_head &rArr; xs_write_weights_table &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_weights_table
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_picture_header
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_component_table
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_capabilities_marker
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[84]"></a>xs_write_picture_header</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, xs_markers.o(.text.xs_write_picture_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xs_write_picture_header &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_head
</UL>

<P><STRONG><a name="[7b]"></a>xs_write_slice_header</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, xs_markers.o(.text.xs_write_slice_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xs_write_slice_header &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[7c]"></a>xs_write_tail</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xs_markers.o(.text.xs_write_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xs_write_tail &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>

<P><STRONG><a name="[85]"></a>xs_write_weights_table</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, xs_markers.o(.text.xs_write_weights_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xs_write_weights_table &rArr; bitpacker_write &rArr; ipx_htobe
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_get_N_filtertypes
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_get_NL
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitpacker_write
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_head
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xs_write_picture_header
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_conf_validate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tco_enc_image
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[47]"></a>pbt_get_data_bgt_of</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, budget.o(.text.pbt_get_data_bgt_of))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[4e]"></a>pbt_get_gcli_bgt_of</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, budget.o(.text.pbt_get_gcli_bgt_of))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_gcli_budget_table
</UL>

<P><STRONG><a name="[4b]"></a>pbt_get_sign_bgt_of</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, budget.o(.text.pbt_get_sign_bgt_of))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[44]"></a>precinct_lvl_of</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, budget.o(.text.precinct_lvl_of))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_data_budget_table
</UL>

<P><STRONG><a name="[53]"></a>to_hlvl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lvls_map.o(.text.to_hlvl))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_lvls_map
</UL>

<P><STRONG><a name="[54]"></a>to_vlvl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lvls_map.o(.text.to_vlvl))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_lvls_map
</UL>

<P><STRONG><a name="[63]"></a>precinct_lvl_of</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, packing.o(.text.precinct_lvl_of))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
</UL>

<P><STRONG><a name="[62]"></a>precinct_subpkt_of</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, packing.o(.text.precinct_subpkt_of))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_precinct
</UL>

<P><STRONG><a name="[6a]"></a>pbt_get_data_bgt_of</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, precinct_budget.o(.text.pbt_get_data_bgt_of))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
</UL>

<P><STRONG><a name="[69]"></a>pbt_get_gcli_bgt_of</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, precinct_budget.o(.text.pbt_get_gcli_bgt_of))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
</UL>

<P><STRONG><a name="[6b]"></a>pbt_get_sign_bgt_of</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, precinct_budget.o(.text.pbt_get_sign_bgt_of))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
</UL>

<P><STRONG><a name="[67]"></a>precinct_nb_subpkts_of</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, precinct_budget.o(.text.precinct_nb_subpkts_of))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
</UL>

<P><STRONG><a name="[6c]"></a>precinct_subpkt_of</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, precinct_budget.o(.text.precinct_subpkt_of))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precinct_get_budget
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
